//final thesis code, includes merge contours

/*===========================LUNG MAP 16.5 (Cleaned Version_2)==================================================================================================*/
#include "opencv2/core/core.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include <string>
#include<conio.h>
#include <opencv/cv.h>
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/features2d/features2d.hpp"
#include <fstream>
#include "opencv2/imgproc/imgproc.hpp"
#include <iostream>



using namespace cv;
using namespace std;

// Define Constants
const int areathresh = 100;//75
const int areath = 500;
const int noofruns = 35;//35
const int disti = 5;
const int hood = 3; // checking for edge points in a (hood X hood) area
//const float stdgaus = 25;//19.8843;
//const float meangaus = 96.8514;// 96.8514;
const int low_bound = 26;
const int up_bound = 1000;
const int dist_out = 5;
RNG rng(12345);
void coverup(Mat &image)
{
	Rect cover = Rect(750, 0, 250, 224); // coordinates ( 807,0) (807,224), (1023, 0), (1023, 224)
	Mat roi_cover = image(cover);
	roi_cover.setTo(cv::Scalar(104, 40, 14));//color
}

//define edges by thresholding color map derived from grayscale images- return edges
Mat findedges(Mat image, string imname)
{
	string edgesWritePath = format("C:\\Users\\VIneeta\\Documents\\Visual Studio 2013\\Projects\\OpenCV-Test\\OpenCV-Test\\Lung_16.5_TestSet\\Segmented\\edges_%s", imname.c_str());
	Mat newimg = image;
	Mat grayimage;
	int scale = 1; int delta = 0;
	//int ddepth = CV_16S;
	Mat abs_grad_x, abs_grad_y, grad_x, grad_y, grad;
	Mat detected;
	// removing unnecessary noisy background;
	GaussianBlur(image, image, Size(3, 3), 0, 0, 4); 
	cvtColor(image, grayimage, CV_BGR2GRAY);

	//trial
	Canny(grayimage, detected, 30, 90, 3);
	//imshow("cannyedges", detected);

	/// Gradient X
	Sobel(grayimage, grad_x, -1, 1, 0, 3, scale, delta, BORDER_DEFAULT);
	convertScaleAbs(grad_x, abs_grad_x);

	/// Gradient Y
	Sobel(grayimage, grad_y, -1, 0, 1, 3, scale, delta, BORDER_DEFAULT);
	convertScaleAbs(grad_y, abs_grad_y);

	Mat colormap_img;
	addWeighted(abs_grad_x, 2, abs_grad_y, 2, 0, grad);
	applyColorMap(grad, colormap_img, COLORMAP_HOT);


	cv::inRange(colormap_img, cv::Scalar(250, 250, 250), cv::Scalar(255, 255, 255), grad);
	//imshow("edges", grad);

	//imwrite(edgesWritePath, grad);


	// Show the result:
	//imshow("cm_img0", colormap_img);
	//imwrite("colormap.png", colormap_img);
	//removebackground(cm_img0);



	return grad;
}

//================================================FUNCTION: Finds Gradient of the Image======================================================

void findgradient(Mat image, Mat & grad_x, Mat & grad_y, Mat & grad)
{
	GaussianBlur(image, image, Size(3, 3), 0, 0, BORDER_DEFAULT);
	/// Convert it to gray
	Mat src_gray;
	cvtColor(image, src_gray, CV_BGR2GRAY);

	int scale = 1;
	int delta = 0;
	//int ddepth = CV_16S;
	Mat abs_grad_x;
	Mat abs_grad_y;
	/// Generate grad_x and grad_y




	/// Gradient X
	Sobel(src_gray, grad_x, -1, 1, 0, 3, scale, delta, BORDER_DEFAULT);
	convertScaleAbs(grad_x, abs_grad_x);

	/// Gradient Y
	Sobel(src_gray, grad_y, -1, 0, 1, 3, scale, delta, BORDER_DEFAULT);
	convertScaleAbs(grad_y, abs_grad_y);
	//cout << grad_x.size() << " , " << grad_y.size() << endl;
	/// Total Gradient (approximate)
	addWeighted(abs_grad_x, 0.5, abs_grad_y, 0.5, 0, grad);
	//phase(grad_x, grad_y, anglo, true);


}
// ------------------------Calculates angle of gradient---------------------------------------------
Mat helpangletime(Mat image)
{
	Mat src_gray;
	cvtColor(image, src_gray, CV_RGB2GRAY);
	Mat Sx;
	Sobel(src_gray, Sx, CV_32F, 1, 0, 3);

	Mat Sy;
	Sobel(src_gray, Sy, CV_32F, 0, 1, 3);

	Mat mag, ori;
	magnitude(Sx, Sy, mag);
	phase(Sx, Sy, ori, false);
	return ori;
}
//======================================FUNCTION: Finds Centroid of each contour==========================================================================================
vector<Point2f> findcentroid(vector<vector<Point>> contours)
{

	vector<Moments> mu(contours.size());

	for (int i = 0; i < contours.size(); i++)
		mu[i] = moments(contours[i], false);

	///  Get the mass centers:
	vector<Point2f> centroi(contours.size());
	for (int i = 0; i < contours.size(); i++)
	{
		centroi[i] = Point2f(mu[i].m10 / mu[i].m00, mu[i].m01 / mu[i].m00);
	}


	return centroi;
}
Point2f findcentroid(vector<Point> contours)
{

	Moments mu;
	mu = moments(contours, false);

	///  Get the mass centers:
	Point2f centroi(contours.size());
	centroi = Point2f(mu.m10 / mu.m00, mu.m01 / mu.m00);
	return centroi;
}

//======================================FUNCTION: Calculates angles at each point on the contour====================================
double angletime(Mat orient, float px2, float py2, float px1, float py1, float cx1, float cy1)
{//              (point being considered X, Y, horixontal line through centroid BX, BY, CX, CY)				centroid------------------B
	double ang;
	ang = orient.at<float>(px2, py2);
	return ang;// returns angle at a single point on the contour
}
double angletime(float px2, float py2, float px1, float py1, float cx1, float cy1)
{//              (point being considered X, Y, horixontal line through centroid BX, BY, CX, CY)				centroid------------------B
	double angle1 = atan2(py2 - cy1, px2 - cx1) * 180.0 / CV_PI;
	double angle2 = 0; 
	//double angle2 = atan2(py1 - cy1, px1 - cx1) * 180.0 / CV_PI;
	double ang = angle1 - angle2;

	if (ang > 360)
		ang = ang - 360;
	else if (ang < 0)
		ang = ang + 360;
	else
		ang = ang;

	ang = ang* CV_PI / 180;// converting to radians
	//cout << ang << endl;
	return ang;// returns angle at a single point on the contour
}

//================================================FUNCTION: Go to the new point============================================================
void gotonewpoint(int x, int y, int & xpo, int & ypo, double theta, int dist)// takes in point(x,y)and angle to move in
{



	//theta = CV_PI;
	if (x<low_bound || y<low_bound || x>up_bound || y>up_bound)// 26 and 1000 indicate x and y boundaries
	{
		xpo = x; ypo = y;
	}
	else
	{
		xpo = x + dist*cos(theta);// angle must be specified in radians
		ypo = y + dist*sin(theta);
	}



	//xpo= (int)round(x + dist * cos(theta * CV_PI / 180.0));
	//ypo = (int)round(y + dist * sin(theta * CV_PI / 180.0));//angle in degrees
}


vector<vector<Point>> movesomemore(Mat orient, vector<vector<Point>> contour)
{
	vector<Point2f> centro = findcentroid(contour);
	int xpo, ypo;
	vector<Point> temp_contour;
	vector<vector<Point>> saved_contours;
	for (int id = 0; id <contour.size(); id++)
	{
		for (int pd = 0; pd < contour[id].size(); pd++)
		{
			double A = angletime(contour[id][pd].x, contour[id][pd].y, centro[id].x + 15, centro[id].y, centro[id].x, centro[id].y);// finding angle at each point of the contour
			gotonewpoint(contour[id][pd].x, contour[id][pd].y, xpo, ypo, A, 15);
			temp_contour.push_back(Point(xpo, ypo));
		}
		saved_contours.push_back(temp_contour);
		temp_contour.clear();
	}
	return saved_contours;
}


bool isitanedgepoints(Mat edges, int x, int y)
{
	int edgpoints = 0;
	int upbound = 1010;
	int lobound = 10;
	int edgpoint_thresh = 8;
	if ((x>lobound) && (x<upbound) && (y>lobound) && (y < upbound))
	{
		for (int i = x - hood; i <= x + hood; i++)
		{
			for (int j = y - hood; j <= y + hood; j++)
			{
				if (edges.at<uchar>(j, i) == 0) //checking presense of edge points
					edgpoints++;
			}
		}
	}
	if (edgpoints > edgpoint_thresh)
		return 1;
	else
		return 0;
}




vector<vector<Point>> movebigcontours(vector<vector<Point>> contours, Mat edges)
{

	Point pin;
	double A;
	vector<vector<Point>> fin_contours(contours.size());
	vector<vector<Point>> not_reached_edge(contours.size());
	vector<vector<Point>> reached_edge(contours.size());
	int no_of_edges = 0;
	int counter = 0;
	int not_reached_count = 0, reached_count = 0;
	int xpo, ypo;
	vector<Point2f> centroid = findcentroid(contours);// finding centroid of all contours in the entire image
	for (int i = 0; i < contours.size(); i++)
	{
		int distance_move = 15;
		// finding centroid of all contours in the entire image
		counter = 0;
		for (int j = 0; j < contours[i].size(); j++)// going through points in every contour
		{
			pin = contours[i][j];// a particular point j in contour i
			A = angletime(pin.x, pin.y, centroid[i].x + 15, centroid[i].y, centroid[i].x, centroid[i].y);// finding angle at each point of the contour
			gotonewpoint(pin.x, pin.y, xpo, ypo, A, distance_move);
			int uu = isitanedgepoints(edges, xpo, ypo);
			if (uu != 1)
			{
				counter++;
			}//not_reached_edge[i].push_back(Point(xpo, ypo));
		}

		if (counter >= 0.02*contours[i].size() && counter <= 0.15*contours[i].size())
			not_reached_edge.push_back(contours[i]);
		else
			reached_edge.push_back(contours[i]);
	}


	vector<vector<Point>> mod_not_reached(not_reached_edge.size());
	vector<Point2f> recalc_centroid = findcentroid(not_reached_edge);
	for (int u = 0; u < not_reached_edge.size(); u++)
	{
		for (int e = 0; e < not_reached_edge[u].size(); e++)
		{
			pin = not_reached_edge[u][e];// a particular point j in contour i
			A = angletime(pin.x, pin.y, recalc_centroid[u].x + 15, recalc_centroid[u].y, recalc_centroid[u].x, recalc_centroid[u].y);// finding angle at each point of the contour
			gotonewpoint(pin.x, pin.y, xpo, ypo, A, 45);
			mod_not_reached[u].push_back(Point(xpo, ypo));
		}
	}

	for (int m = 0; m < reached_edge.size(); m++)
		fin_contours.push_back(reached_edge[m]);

	for (int n = 0; n < mod_not_reached.size(); n++)
		fin_contours.push_back(mod_not_reached[n]);

	/*-------------------------------------------------------------------------------*/



	return fin_contours;
}


vector<vector<Point>> removeunwantedblack(vector<vector<Point>> contours, Mat img)
{
	Mat img_LAB;
	Mat thresh_img(img.rows, img.cols, CV_8U);
	vector<vector<Point>> store_contours; vector<vector<Point>> saved_contours;
	vector<Rect> boundRect(contours.size());
	cvtColor(img, img_LAB, CV_BGR2Lab);
	cv::inRange(img_LAB, cv::Scalar(0, 100, 100), cv::Scalar(30, 150, 150), thresh_img);
	dilate(thresh_img, thresh_img, Mat());
	int last = contours.size() - 1;
	for (int i = 0; i < contours.size(); i++)
	{

		boundRect[i] = boundingRect(Mat(contours[i]));
		if ((boundRect[i].x >0) && (boundRect[i].y > 0) && (boundRect[i].x < 1000) && (boundRect[i].y < 1000))
		{
			float test1 = boundRect[i].x - boundRect[i].width;
			float test2 = boundRect[i].y - boundRect[i].height;
			float test3 = boundRect[i].x + boundRect[i].width;
			float test4 = boundRect[i].y + boundRect[i].height;
			if ((test1 < 0) || (test2 < 0) || (test3>1024) || (test4>1024))
			{
				continue;
			}
			Mat roi = thresh_img(boundRect[i]);// creating a new image from roi
			if (roi.rows < 1024 && roi.cols < 1024)
			{
				//		int imgsiz = roi.rows*  roi.cols;

				int blackpix = countNonZero(roi); // count of number of white pixels in thresholded ROI
				int remain_pix = (roi.rows*roi.cols) - blackpix;
				if ((remain_pix / blackpix)< 0.8 && (fabs(contourArea(Mat(contours[i]))) <5000))//(remain_pix <= 1000)
				{
					//cout << "IN  " << (float) remain_pix / blackpix << endl;  //cout << imgsiz/remain_pix<< endl;

					store_contours.push_back(contours[i]);
					/*else
					saved_contours.push_back(contours[i]);*/

				}
				else
					saved_contours.push_back(contours[i]);

				///cout << "OUT  " << (float) remain_pix / blackpix << endl;
			}
		}
		/*else
		cout << "WHOOPS";*/
	}
	saved_contours.push_back(contours[last]);
	return saved_contours;
}


vector<vector<Point>> cleancontours(vector<vector<Point>> contours, vector<vector<Point>> mergecontours, vector<int> index)
{
	cout << "IN  CleanContours" << endl;
	vector<vector<Point>> newcontours;
	cout << "Contour and Index size:  " << contours.size() << ", " << index.size() << endl;
	for (int i = 0; i < contours.size(); i++)
	{
		if (std::find(index.begin(), index.end(), i) == index.end())// not present
		{
			if ((std::find(newcontours.begin(), newcontours.end(), contours[i]) == newcontours.end()))
				newcontours.push_back(contours[i]);
		}
	}
	for (int p = 0; p < mergecontours.size(); p++)
	{
		if ((std::find(newcontours.begin(), newcontours.end(), mergecontours[p]) == newcontours.end()))
			newcontours.push_back(mergecontours[p]);
	}

	cout << "OUT  CleanContours" << endl;
	return newcontours;

}

vector<Point> mergecontours(Mat img, vector<Point> contourA, vector<Point> contourB)
{
	//	cout << "IN Merge Contours" << endl;
	vector<vector<Point>> fincont;
	fincont.push_back(contourA);
	fincont.push_back(contourB);

	Mat checkimg(img.rows, img.cols, CV_8UC1);
	checkimg.setTo(Scalar(0, 0, 0));
	for (int i = 0; i < fincont.size(); i++)
		drawContours(checkimg, fincont, i, Scalar(255, 255, 255), CV_FILLED, 8);

	vector<vector<Point>> mergedcontours; vector<Vec4i> hierarchy;
	findContours(checkimg, mergedcontours, hierarchy, CV_RETR_CCOMP, cv::CHAIN_APPROX_NONE);
	if (mergedcontours.size()>1)
	{
		dilate(checkimg, checkimg, Mat()); dilate(checkimg, checkimg, Mat());
	}
	findContours(checkimg, mergedcontours, hierarchy, CV_RETR_CCOMP, cv::CHAIN_APPROX_NONE);
	//cout << "Merged Contour size :   " << fincont.size() << ","<< mergedcontours.size() << endl;
	return mergedcontours[0];


}

vector<vector<Point>> findmerge(Mat img, vector<vector<Point>> &contours)
{
	//	cout << "IN  findmerge" << endl;

	Mat imgclone = img.clone();
	//imshow("contour Orignal", img);
	//cout <<"Before  "<< contours.size()<< endl;
	vector<vector<Point>> mergedcontours;
	vector<int> index;
	Mat checkimg1(img.rows, img.cols, CV_8UC1);
	checkimg1.setTo(Scalar(0, 0, 0));
	Mat checkimg2(img.rows, img.cols, CV_8UC1);
	checkimg2.setTo(Scalar(0, 0, 0));
	Mat result(img.rows, img.cols, CV_8UC1);
	result.setTo(Scalar(0, 0, 0));

	for (int i = 0; i < contours.size(); i++)
	{
		drawContours(checkimg1, contours, i, Scalar(255, 255, 255), CV_FILLED, 8);

		for (int j = 0; j < contours.size(); j++)
		{
			if (j != i)
			{
				drawContours(checkimg2, contours, j, Scalar(255, 255, 255), CV_FILLED, 8);
				bitwise_and(checkimg1, checkimg2, result);
				if (countNonZero(result)> 5)
				{
					vector<Point> merged = mergecontours(img, contours[i], contours[j]);
					/*std::find searches in the range defined by its first two arguments. It returns an iterator pointing to the first element that matches. If no element matches, it returns its 2nd parameter.*/
					if (std::find(index.begin(), index.end(), i) != index.end())// if present
					{
					}
					else
						index.push_back(i);

					if (std::find(index.begin(), index.end(), j) != index.end())// if present
					{
					}
					else
						index.push_back(j);
					/*contours.erase(contours.begin() + i);
					contours.erase(contours.begin() + j);*/
					mergedcontours.push_back(merged);
				}

				checkimg2.setTo(Scalar(0, 0, 0));
				result.setTo(Scalar(0, 0, 0));
			}
		}
		checkimg1.setTo(Scalar(0, 0, 0));
	}

	vector<vector<Point>> newcontours = cleancontours(contours, mergedcontours, index);
	cout << "Before  " << contours.size() << endl;
	cout << "After  " << newcontours.size() << endl;
	//	cout << "OUT  findmerge" << endl;

	return newcontours;
	//imshow("contour Orignal", imgclone);

}



//===================================================MAIN STARTS==========================================================

int main()
{
	// =============================== Initialization===============================================
	std::ifstream file("quick_testset16.5.txt");
	std::string imname;
	while (std::getline(file, imname))
	{
		string imagepath = format("C:\\Users\\VIneeta\\Documents\\Visual Studio 2013\\Projects\\OpenCV-Test\\OpenCV-Test\\Lung_16.5_TestSet\\%s", imname.c_str());
		string imageWritePath = format("C:\\Users\\VIneeta\\Documents\\Visual Studio 2013\\Projects\\OpenCV-Test\\OpenCV-Test\\Lung_16.5_TestSet\\Segmented\\mod_%s", imname.c_str());
		string imageWritePath2 = format("C:\\Users\\VIneeta\\Documents\\Visual Studio 2013\\Projects\\OpenCV-Test\\OpenCV-Test\\Lung_16.5_TestSet\\Segmented\\remove_%s", imname.c_str());
		Mat inputImage = imread(imagepath);
		if (inputImage.empty())
		{
			cout << "NOT FOUND" << endl; continue;
		}
		else
			cout << format("processing %s", imname.c_str()) << endl;

		//GaussianBlur(blackimage, blackimage, Size(3, 3), 0, 0, BORDER_DEFAULT);

		//variable definition
		float gradpo, angpo, probinfo;
		int no_of_edges = 0;
		int xpo = 0, ypo = 0;
		double A; //angle
		Point pin;
		Mat grad_x, grad_y, grad, blurImage;
		vector<vector<Point>> black_contours, storconts, contours, DrawCont; // Vector for storing contour
		vector<Point>storag, coont, backup;
		vector<Vec4i> black_hierarchy;
		vector<vector<double>> angstore;
		vector<double> ango;// to associate angles with each point
		vector<int> ido;
		Mat img_LAB;

		Mat orient = helpangletime(inputImage); // calculates angle of gradient

		/*~~~~~CALL~~~~~~*/
		//coverup(inputImage);   //Covers up the written text

		Mat cloneImage = inputImage.clone(); //to draw contours on
		// =============================== =================================================================
		Mat cloneImage2 = inputImage.clone();
		Mat tempImage = inputImage.clone();
		Mat tempImage1 = inputImage.clone();
		Mat tempImage2 = inputImage.clone();
		Mat tempImage3 = inputImage.clone();
		Mat tempImage4 = inputImage.clone();
		/*~~~~~CALL~~~~~~*/
		Mat edges = findedges(inputImage, imname);// returns edges of the image
		/*~~~~~CALL~~~~~~*/
		findgradient(inputImage, grad_x, grad_y, grad);// finds gradient of the whole image once in the program


		// ##  STEP 1 : Find good black contours 
		//===== ======================= Thresholding &  Contouring===============================================
		Mat thr_inputImage(inputImage.rows, inputImage.cols, CV_8UC1);
		// removing unnecessary noisy background
		GaussianBlur(inputImage, blurImage, Size(7, 7), 0, 0, 4); 
		cv::inRange(blurImage, cv::Scalar(0, 0, 0), cv::Scalar(35, 45, 45), thr_inputImage);//35, 30, 30)  35, 45, 35
		findContours(thr_inputImage, black_contours, black_hierarchy, CV_RETR_CCOMP, CV_CHAIN_APPROX_SIMPLE); // find all black contours
		// finding and saving the contours that are above a certain area
		for (int dop = 0; dop < black_contours.size(); dop++)
		{
			float cont_area = contourArea(black_contours[dop], false);
			if (cont_area > areathresh)
				contours.push_back(black_contours[dop]); //saving only the large contours in another variable
		}
		/*for (int g = 0; g < contours.size(); g++)  // finding and saving the contours that are above a certain area
		{
		drawContours(tempImage, contours, g, Scalar(0, 255, 255), 2, 8, vector<Vec4i>(), 0, Point());
		// ##  END STEP 1
		}*/


		/*~~~~~CALL~~~~~~*/
		vector<Point2f> centroi = findcentroid(contours);// finding centroid of all contours in the entire image

		//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ DRAW CONTOURS, IMSHOW & END ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

		vector<vector<Point>> temp_contours(contours.size());
		vector<vector<Point>> alternate_contours(temp_contours.size());
		vector<vector<Point>> store_contours;


		for (int i = 0; i < contours.size(); i++) // going through each contour
		{

			no_of_edges = 0;//count of number of edges


			//FIRST RUN : Moving the points in the contour by 5 and checking if edge point

			for (int j = 0; j < contours[i].size(); j++)// going through points in every contour
			{
				pin = contours[i][j];// a particular point j in contour i
				A = angletime(pin.x, pin.y, centroi[i].x + 15, centroi[i].y, centroi[i].x, centroi[i].y);// finding angle at each point of the contour
				gotonewpoint(pin.x, pin.y, xpo, ypo, A, dist_out);
				temp_contours[i].push_back(Point(xpo, ypo));// storing the newly moved to points into empty temp_contours
				int uu = isitanedgepoints(edges, xpo, ypo);
				if (uu == 1)
					no_of_edges++;
			}
			/*for (int g = 0; g < temp_contours.size(); g++)  // finding and saving the contours that are above a certain area
			{
			drawContours(tempImage1, temp_contours, g, Scalar(0, 255, 255), 2, 8, vector<Vec4i>(), 0, Point());
			// ##  END STEP 1
			}
			imwrite("Step2.png", tempImage1);*/

			// SUBSEQUENT RUNS : Moving the points in the contour by 5 and checking if edge point till atleast half the points in the contour are edge points

			if (no_of_edges < contours[i].size() / 2) // if (no of edge points in the contour < half the points in the contour)--> go for another run
			{
				no_of_edges = 0;
			POP:
				Point2f recalc_centroi = findcentroid(temp_contours[i]);
				for (int jo = 0; jo < temp_contours[i].size(); jo++)// going through points in every contour
				{
					pin = temp_contours[i][jo];// a particular point j in contour 
					//pin = mcontours[i][jo];

					A = angletime(orient, pin.x, pin.y, recalc_centroi.x + 15, recalc_centroi.y, recalc_centroi.x, recalc_centroi.y);// finding angle at each point of the contour
					gotonewpoint(pin.x, pin.y, xpo, ypo, A, dist_out);
					alternate_contours[i].push_back(Point(xpo, ypo)); // new point now put into alternate_contours
					if (isitanedgepoints(edges, xpo, ypo) == 1)
						no_of_edges++;
				}


				//if no of edges is leasser than half the size of alternate_contours  // else: moves on to next set of contour
				if (no_of_edges < alternate_contours[i].size() / 2)
				{
					no_of_edges = 0;
					temp_contours[i].clear();
					for (int ya = 0; ya < temp_contours[i].size(); ya++)
						temp_contours[ya].push_back(Point(alternate_contours[i][ya].x, alternate_contours[i][ya].y));
					alternate_contours[i].clear();
					goto POP;
				}
			}

			else
				alternate_contours.push_back(temp_contours[i]);
		}


		/*~~~~~CALL~~~~~~*/vector<vector<Point>>lapo = movesomemore(orient, alternate_contours);


		//----------------------- Working with the bigger contours-------------------------------
		vector<vector<Point>> big_contours;
		for (int ido = 0; ido < lapo.size(); ido++)
		{

			float chaido = fabs(contourArea(cv::Mat(lapo[ido])));

			if (chaido >20000)
				big_contours.push_back(lapo[ido]);
			else
			{
				store_contours.push_back(lapo[ido]);
				drawContours(cloneImage, lapo, ido, Scalar(0, 255, 0), 2, 8, vector<Vec4i>(), 0, Point());
			}
		}

		vector<vector<Point>> mod_big_contours = movebigcontours(big_contours, edges);

		for (int g = 0; g < mod_big_contours.size(); g++)
		{
			drawContours(cloneImage, mod_big_contours, g, Scalar(0, 255, 255), 2, 8, vector<Vec4i>(), 0, Point());
			store_contours.push_back(mod_big_contours[g]);
		}



		vector<vector<Point>> new_contours = removeunwantedblack(store_contours, inputImage);
		/*for (int g = 0; g < new_contours.size(); g++)  // finding and saving the contours that are above a certain area
		{
		drawContours(tempImage2, new_contours, g, Scalar(0, 255, 255), 2, 8, vector<Vec4i>(), 0, Point());
		// ##  END STEP 1
		}
		imwrite("Step3.png", tempImage2);*/
		vector<vector<Point>> newcont = findmerge(inputImage, new_contours);


		//cout <<"before  "<<  new_contours.size() << endl;;
		//cout << "after  " <<newcont.size()<< endl;


		for (int g = 0; g < newcont.size(); g++)
			drawContours(cloneImage2, newcont, g, Scalar(0, 255, 255), CV_FILLED, 8, vector<Vec4i>(), 0, Point());

		//imwrite(imageWritePath, cloneImage);
		imwrite(imageWritePath2, cloneImage2);
		cout << "DOME!!" << endl;

	}
	waitKey(0);
}
